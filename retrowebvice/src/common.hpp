#pragma once

#include <algorithm>
#include <array>
#include <atomic>
#include <cctype>
#include <chrono>
#include <climits>
#include <cstdlib>
#include <fstream>
#include <functional>
#include <future>
#include <iostream>
#include <map>
#include <memory>
#include <mutex>
#include <optional>
#include <queue>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <thread>
#include <tuple>
#include <type_traits>
#include <utility>
#include <vector>

using std::array;
using std::atomic;
using std::binary_search;
using std::cerr;
using std::cout;
using std::declval;
using std::enable_shared_from_this;
using std::fill;
using std::forward;
using std::function;
using std::future;
using std::ifstream;
using std::lock_guard;
using std::make_shared;
using std::make_unique;
using std::map;
using std::max;
using std::memory_order_relaxed;
using std::min;
using std::move;
using std::mt19937;
using std::mutex;
using std::ofstream;
using std::optional;
using std::ostream;
using std::pair;
using std::promise;
using std::queue;
using std::random_device;
using std::regex;
using std::regex_match;
using std::remove_const;
using std::remove_reference;
using std::set;
using std::shared_ptr;
using std::smatch;
using std::sort;
using std::string;
using std::stringstream;
using std::swap;
using std::thread;
using std::tie;
using std::tuple;
using std::uniform_int_distribution;
using std::unique_ptr;
using std::vector;
using std::weak_ptr;

using std::chrono::duration_cast;
using std::chrono::milliseconds;
using std::chrono::steady_clock;

using std::this_thread::sleep_for;
